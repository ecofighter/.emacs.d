;;; init.el --- my init.el           -*- lexical-binding: t; -*-
;;; Commentary:
;;; Code:
(setq custom-file (locate-user-emacs-file "custom.el"))
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024))

(require 'package)
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(setq package-enable-at-startup nil)
(setq package-archives
      '(("melpa"        . "https://melpa.org/packages/")
        ("org"          . "https://orgmode.org/elpa/")
        ("gnu"          . "https://elpa.gnu.org/packages/")))

;; (eval-when-compile
;; (when (boundp 'package-pinned-packages)
;;   (setq package-pinned-packages
;;         '((evil      . "melpa-stable")))))
(package-initialize)

(add-to-list 'load-path "~/.emacs.d/mylisp")
(require 'mymacros)
(require 'myutils)
(add-to-list 'load-path "~/.emacs.d/inits")
(require '00-init)
(require '01-graphics)
(require '02-exec-path-from-shell)
(require '10-evil)
(require '10-ivy)
(require '10-shackle)
(require '10-winner)
(require '10-which-key)
;; (require '10-hl-todo)
;; (require '10-editorconfig)
(require '10-smart-mode-line)
(require '10-tramp)
;; (require '10-ripgrep)
(require '20-eshell)
(require '20-ddskk)
;; (require '20-migemo)
;; (require '20-fcitx)
;; (require '20-uim)
(require '20-company)
(require '20-yasnippet)
;; (require '20-flymake)
(require '20-flycheck)
(require '20-smartparens)
(require '20-rainbow-delimiters)
(require '20-highlight-indent-guides)
(require '20-magit)
;; (require '20-google-translate)
;; (require '30-bison)
;; (require '30-cmake)
(require '30-org)
(require '30-yaml)
(require '30-emacslisp)
;; (require '30-common-lisp)
(require '30-scheme)
;; (require '30-agda)
;; (require '30-ocaml)
(require '30-sml)
(require '30-fsharp)
(require '30-markdown)
(require '30-purescript)
(require '30-coq)
;; (require '30-lean)
;; (require '30-pdf)
(require '31-lsp)
;; (require '31-eglot)
(require '32-c++)
(require '32-rust)
(require '32-haskell)
(require '32-scala)
(require '32-typescript)
(require '32-latex)

(install-when-compile 'package-utils)
(garbage-collect)
(provide 'init)
;;; init.el ends here
